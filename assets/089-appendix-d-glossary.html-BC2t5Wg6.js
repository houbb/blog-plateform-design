import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as s,o as r}from"./app-BzRS7AVz.js";const i={};function h(p,a){return r(),n("div",null,[...a[0]||(a[0]=[s('<p>本文档提供了CI/CD及相关领域中常用术语的定义和解释，帮助读者更好地理解本书内容。</p><h2 id="a" tabindex="-1"><a class="header-anchor" href="#a"><span>A</span></a></h2><h3 id="api-application-programming-interface" tabindex="-1"><a class="header-anchor" href="#api-application-programming-interface"><span>API (Application Programming Interface)</span></a></h3><p>应用程序编程接口，定义了软件组件之间交互的规范和协议。</p><h3 id="api-first-design" tabindex="-1"><a class="header-anchor" href="#api-first-design"><span>API-First Design</span></a></h3><p>API优先设计，指在开发过程中首先设计和定义API接口，然后基于API进行开发的方法。</p><h3 id="approval-gate" tabindex="-1"><a class="header-anchor" href="#approval-gate"><span>Approval Gate</span></a></h3><p>审批门禁，在流水线中设置的人工或自动审批节点，确保变更在部署前得到适当审查。</p><h3 id="artifact" tabindex="-1"><a class="header-anchor" href="#artifact"><span>Artifact</span></a></h3><p>制品，软件构建过程中产生的可部署文件，如JAR包、Docker镜像、NPM包等。</p><h3 id="artifact-repository" tabindex="-1"><a class="header-anchor" href="#artifact-repository"><span>Artifact Repository</span></a></h3><p>制品仓库，用于存储和管理构建制品的系统，如Nexus、Artifactory等。</p><h2 id="b" tabindex="-1"><a class="header-anchor" href="#b"><span>B</span></a></h2><h3 id="blue-green-deployment" tabindex="-1"><a class="header-anchor" href="#blue-green-deployment"><span>Blue-Green Deployment</span></a></h3><p>蓝绿部署，一种部署策略，通过维护两个相同的生产环境（蓝色和绿色）来实现零停机部署。</p><h3 id="branching-strategy" tabindex="-1"><a class="header-anchor" href="#branching-strategy"><span>Branching Strategy</span></a></h3><p>分支策略，团队在版本控制系统中管理代码分支的规范和方法，如Git Flow、GitHub Flow等。</p><h3 id="build" tabindex="-1"><a class="header-anchor" href="#build"><span>Build</span></a></h3><p>构建，将源代码转换为可执行软件的过程，通常包括编译、链接、打包等步骤。</p><h3 id="build-automation" tabindex="-1"><a class="header-anchor" href="#build-automation"><span>Build Automation</span></a></h3><p>构建自动化，通过脚本和工具自动执行软件构建过程，减少人工干预。</p><h2 id="c" tabindex="-1"><a class="header-anchor" href="#c"><span>C</span></a></h2><h3 id="canary-deployment" tabindex="-1"><a class="header-anchor" href="#canary-deployment"><span>Canary Deployment</span></a></h3><p>金丝雀部署，一种渐进式部署策略，先将新版本部署到一小部分用户，然后逐步扩大范围。</p><h3 id="cd-continuous-delivery" tabindex="-1"><a class="header-anchor" href="#cd-continuous-delivery"><span>CD (Continuous Delivery)</span></a></h3><p>持续交付，确保软件可以随时发布的实践，通过自动化流程将变更可靠地部署到类生产环境。</p><h3 id="cd-continuous-deployment" tabindex="-1"><a class="header-anchor" href="#cd-continuous-deployment"><span>CD (Continuous Deployment)</span></a></h3><p>持续部署，持续交付的延伸，在持续交付的基础上自动将通过所有测试的变更部署到生产环境。</p><h3 id="ci-continuous-integration" tabindex="-1"><a class="header-anchor" href="#ci-continuous-integration"><span>CI (Continuous Integration)</span></a></h3><p>持续集成，开发人员频繁地将代码变更集成到共享仓库，并通过自动化构建和测试验证变更的实践。</p><h3 id="ci-cd-pipeline" tabindex="-1"><a class="header-anchor" href="#ci-cd-pipeline"><span>CI/CD Pipeline</span></a></h3><p>CI/CD流水线，将代码从提交到部署的整个自动化流程，包括构建、测试、部署等阶段。</p><h3 id="code-coverage" tabindex="-1"><a class="header-anchor" href="#code-coverage"><span>Code Coverage</span></a></h3><p>代码覆盖率，衡量测试用例执行了多少源代码的指标，通常以百分比表示。</p><h3 id="configuration-as-code" tabindex="-1"><a class="header-anchor" href="#configuration-as-code"><span>Configuration as Code</span></a></h3><p>配置即代码，将系统配置以代码形式管理的实践，便于版本控制和自动化。</p><h3 id="container" tabindex="-1"><a class="header-anchor" href="#container"><span>Container</span></a></h3><p>容器，一种轻量级虚拟化技术，将应用程序及其依赖打包在一起，确保在不同环境中一致运行。</p><h2 id="d" tabindex="-1"><a class="header-anchor" href="#d"><span>D</span></a></h2><h3 id="deployment" tabindex="-1"><a class="header-anchor" href="#deployment"><span>Deployment</span></a></h3><p>部署，将软件应用程序安装到目标环境并使其可供使用的过程。</p><h3 id="devops" tabindex="-1"><a class="header-anchor" href="#devops"><span>DevOps</span></a></h3><p>开发运维，一种文化和实践，旨在缩短系统开发生命周期，提供高质量软件的持续交付。</p><h3 id="devsecops" tabindex="-1"><a class="header-anchor" href="#devsecops"><span>DevSecOps</span></a></h3><p>开发安全运维，DevOps的扩展，在整个软件开发生命周期中集成安全实践。</p><h3 id="docker" tabindex="-1"><a class="header-anchor" href="#docker"><span>Docker</span></a></h3><p>Docker，一种开源的容器化平台，用于自动化应用程序的部署、扩展和管理。</p><h3 id="dockerfile" tabindex="-1"><a class="header-anchor" href="#dockerfile"><span>Dockerfile</span></a></h3><p>Dockerfile，用于定义如何构建Docker镜像的文本文件，包含一系列指令。</p><h2 id="e" tabindex="-1"><a class="header-anchor" href="#e"><span>E</span></a></h2><h3 id="environment" tabindex="-1"><a class="header-anchor" href="#environment"><span>Environment</span></a></h3><p>环境，应用程序运行的特定配置和基础设施，如开发、测试、预发、生产环境。</p><h3 id="environment-isolation" tabindex="-1"><a class="header-anchor" href="#environment-isolation"><span>Environment Isolation</span></a></h3><p>环境隔离，确保不同环境之间相互独立，避免相互影响的实践。</p><h2 id="f" tabindex="-1"><a class="header-anchor" href="#f"><span>F</span></a></h2><h3 id="feature-branch" tabindex="-1"><a class="header-anchor" href="#feature-branch"><span>Feature Branch</span></a></h3><p>功能分支，为开发特定功能而创建的代码分支，开发完成后合并到主分支。</p><h3 id="feature-flag" tabindex="-1"><a class="header-anchor" href="#feature-flag"><span>Feature Flag</span></a></h3><p>功能开关，一种技术手段，允许在不部署新代码的情况下启用或禁用特定功能。</p><h3 id="feedback-loop" tabindex="-1"><a class="header-anchor" href="#feedback-loop"><span>Feedback Loop</span></a></h3><p>反馈循环，指从系统输出返回到输入的过程，用于持续改进和调整。</p><h2 id="g" tabindex="-1"><a class="header-anchor" href="#g"><span>G</span></a></h2><h3 id="git" tabindex="-1"><a class="header-anchor" href="#git"><span>Git</span></a></h3><p>Git，一种分布式版本控制系统，广泛用于软件开发中的代码管理。</p><h3 id="gitops" tabindex="-1"><a class="header-anchor" href="#gitops"><span>GitOps</span></a></h3><p>GitOps，一种基于Git的运维模式，将Git作为系统状态的唯一真实来源。</p><h3 id="github-flow" tabindex="-1"><a class="header-anchor" href="#github-flow"><span>GitHub Flow</span></a></h3><p>GitHub Flow，一种轻量级的Git分支策略，适用于持续交付。</p><h3 id="gitlab-ci-cd" tabindex="-1"><a class="header-anchor" href="#gitlab-ci-cd"><span>GitLab CI/CD</span></a></h3><p>GitLab CI/CD，GitLab平台内置的持续集成和持续交付功能。</p><h2 id="h" tabindex="-1"><a class="header-anchor" href="#h"><span>H</span></a></h2><h3 id="helm" tabindex="-1"><a class="header-anchor" href="#helm"><span>Helm</span></a></h3><p>Helm，Kubernetes的包管理工具，用于定义、安装和升级Kubernetes应用程序。</p><h3 id="hook" tabindex="-1"><a class="header-anchor" href="#hook"><span>Hook</span></a></h3><p>钩子，一种机制，允许在特定事件发生时执行自定义脚本或操作。</p><h2 id="i" tabindex="-1"><a class="header-anchor" href="#i"><span>I</span></a></h2><h3 id="iac-infrastructure-as-code" tabindex="-1"><a class="header-anchor" href="#iac-infrastructure-as-code"><span>IaC (Infrastructure as Code)</span></a></h3><p>基础设施即代码，使用代码来管理和配置基础设施的实践。</p><h3 id="idempotent" tabindex="-1"><a class="header-anchor" href="#idempotent"><span>Idempotent</span></a></h3><p>幂等性，指操作可以多次执行而不会产生不同的结果。</p><h3 id="immutable-infrastructure" tabindex="-1"><a class="header-anchor" href="#immutable-infrastructure"><span>Immutable Infrastructure</span></a></h3><p>不可变基础设施，一旦部署就不修改的基础设施管理理念，变更通过替换实现。</p><h3 id="integration-test" tabindex="-1"><a class="header-anchor" href="#integration-test"><span>Integration Test</span></a></h3><p>集成测试，验证不同模块或服务之间交互是否正确的测试类型。</p><h2 id="j" tabindex="-1"><a class="header-anchor" href="#j"><span>J</span></a></h2><h3 id="jenkins" tabindex="-1"><a class="header-anchor" href="#jenkins"><span>Jenkins</span></a></h3><p>Jenkins，一种开源的自动化服务器，广泛用于实现CI/CD流水线。</p><h3 id="jenkinsfile" tabindex="-1"><a class="header-anchor" href="#jenkinsfile"><span>Jenkinsfile</span></a></h3><p>Jenkinsfile，Jenkins Pipeline的配置文件，使用Groovy语法定义流水线。</p><h2 id="k" tabindex="-1"><a class="header-anchor" href="#k"><span>K</span></a></h2><h3 id="kanban" tabindex="-1"><a class="header-anchor" href="#kanban"><span>Kanban</span></a></h3><p>看板，一种可视化工作流程的管理方法，帮助团队优化工作流程。</p><h3 id="kubernetes" tabindex="-1"><a class="header-anchor" href="#kubernetes"><span>Kubernetes</span></a></h3><p>Kubernetes，一种开源的容器编编排平台，用于自动化应用程序的部署、扩展和管理。</p><h2 id="l" tabindex="-1"><a class="header-anchor" href="#l"><span>L</span></a></h2><h3 id="linting" tabindex="-1"><a class="header-anchor" href="#linting"><span>Linting</span></a></h3><p>代码检查，通过工具自动检查代码质量和潜在问题的过程。</p><h2 id="m" tabindex="-1"><a class="header-anchor" href="#m"><span>M</span></a></h2><h3 id="master-worker-architecture" tabindex="-1"><a class="header-anchor" href="#master-worker-architecture"><span>Master/Worker Architecture</span></a></h3><p>主从架构，一种分布式系统架构，由一个主节点和多个工作节点组成。</p><h3 id="microservice" tabindex="-1"><a class="header-anchor" href="#microservice"><span>Microservice</span></a></h3><p>微服务，一种架构风格，将应用程序构建为一组小的、独立的服务。</p><h2 id="n" tabindex="-1"><a class="header-anchor" href="#n"><span>N</span></a></h2><h3 id="nexus" tabindex="-1"><a class="header-anchor" href="#nexus"><span>Nexus</span></a></h3><p>Nexus，Sonatype公司提供的仓库管理软件，用于存储和管理构建制品。</p><h2 id="o" tabindex="-1"><a class="header-anchor" href="#o"><span>O</span></a></h2><h3 id="observability" tabindex="-1"><a class="header-anchor" href="#observability"><span>Observability</span></a></h3><p>可观测性，系统通过其外部输出（日志、指标、链路追踪）来理解和解释其内部状态的能力。</p><h3 id="on-premises" tabindex="-1"><a class="header-anchor" href="#on-premises"><span>On-Premises</span></a></h3><p>本地部署，软件部署在组织自己的服务器和基础设施上，而不是云服务提供商的平台上。</p><h2 id="p" tabindex="-1"><a class="header-anchor" href="#p"><span>P</span></a></h2><h3 id="pipeline" tabindex="-1"><a class="header-anchor" href="#pipeline"><span>Pipeline</span></a></h3><p>流水线，将软件从源代码到部署的整个自动化流程。</p><h3 id="pipeline-as-code" tabindex="-1"><a class="header-anchor" href="#pipeline-as-code"><span>Pipeline as Code</span></a></h3><p>流水线即代码，将CI/CD流水线定义为代码的实践，便于版本控制和自动化。</p><h3 id="plugin" tabindex="-1"><a class="header-anchor" href="#plugin"><span>Plugin</span></a></h3><p>插件，用于扩展软件功能的模块化组件。</p><h2 id="q" tabindex="-1"><a class="header-anchor" href="#q"><span>Q</span></a></h2><h3 id="quality-gate" tabindex="-1"><a class="header-anchor" href="#quality-gate"><span>Quality Gate</span></a></h3><p>质量门禁，在流水线中设置的检查点，确保只有满足特定质量标准的变更才能继续。</p><h2 id="r" tabindex="-1"><a class="header-anchor" href="#r"><span>R</span></a></h2><h3 id="release" tabindex="-1"><a class="header-anchor" href="#release"><span>Release</span></a></h3><p>发布，将软件的特定版本交付给最终用户的过程。</p><h3 id="repository" tabindex="-1"><a class="header-anchor" href="#repository"><span>Repository</span></a></h3><p>仓库，版本控制系统中存储代码和历史记录的地方。</p><h3 id="rolling-deployment" tabindex="-1"><a class="header-anchor" href="#rolling-deployment"><span>Rolling Deployment</span></a></h3><p>滚动部署，一种部署策略，逐步替换应用程序的实例，避免停机时间。</p><h2 id="s" tabindex="-1"><a class="header-anchor" href="#s"><span>S</span></a></h2><h3 id="sast-static-application-security-testing" tabindex="-1"><a class="header-anchor" href="#sast-static-application-security-testing"><span>SAST (Static Application Security Testing)</span></a></h3><p>静态应用安全测试，在不运行代码的情况下分析源代码以发现安全漏洞。</p><h3 id="scm-source-control-management" tabindex="-1"><a class="header-anchor" href="#scm-source-control-management"><span>SCM (Source Control Management)</span></a></h3><p>源码管理，管理和跟踪代码变更的系统，如Git、SVN等。</p><h3 id="scripted-pipeline" tabindex="-1"><a class="header-anchor" href="#scripted-pipeline"><span>Scripted Pipeline</span></a></h3><p>脚本化流水线，Jenkins Pipeline的一种语法，使用Groovy编写，提供更大的灵活性。</p><h3 id="sdlc-software-development-life-cycle" tabindex="-1"><a class="header-anchor" href="#sdlc-software-development-life-cycle"><span>SDLC (Software Development Life Cycle)</span></a></h3><p>软件开发生命周期，软件从需求分析到退役的整个过程。</p><h3 id="security-scan" tabindex="-1"><a class="header-anchor" href="#security-scan"><span>Security Scan</span></a></h3><p>安全扫描，自动检测代码、依赖项或配置中安全漏洞的过程。</p><h3 id="selenium" tabindex="-1"><a class="header-anchor" href="#selenium"><span>Selenium</span></a></h3><p>Selenium，一种用于Web应用程序自动化测试的开源框架。</p><h3 id="service-mesh" tabindex="-1"><a class="header-anchor" href="#service-mesh"><span>Service Mesh</span></a></h3><p>服务网格，一种基础设施层，用于处理服务间通信、监控、安全等。</p><h3 id="sli-service-level-indicator" tabindex="-1"><a class="header-anchor" href="#sli-service-level-indicator"><span>SLI (Service Level Indicator)</span></a></h3><p>服务水平指标，用于衡量服务质量的具体指标。</p><h3 id="slo-service-level-objective" tabindex="-1"><a class="header-anchor" href="#slo-service-level-objective"><span>SLO (Service Level Objective)</span></a></h3><p>服务水平目标，为SLI设定的具体目标值。</p><h3 id="sla-service-level-agreement" tabindex="-1"><a class="header-anchor" href="#sla-service-level-agreement"><span>SLA (Service Level Agreement)</span></a></h3><p>服务水平协议，服务提供商和客户之间关于服务质量的正式协议。</p><h3 id="sonarqube" tabindex="-1"><a class="header-anchor" href="#sonarqube"><span>SonarQube</span></a></h3><p>SonarQube，一种代码质量管理平台，用于持续检查代码质量。</p><h3 id="sprint" tabindex="-1"><a class="header-anchor" href="#sprint"><span>Sprint</span></a></h3><p>冲刺，Scrum框架中的一个时间盒，通常为2-4周，团队在此期间完成预定工作。</p><h3 id="ssh-secure-shell" tabindex="-1"><a class="header-anchor" href="#ssh-secure-shell"><span>SSH (Secure Shell)</span></a></h3><p>安全外壳协议，一种网络协议，用于安全地访问网络服务。</p><h2 id="t" tabindex="-1"><a class="header-anchor" href="#t"><span>T</span></a></h2><h3 id="test-automation" tabindex="-1"><a class="header-anchor" href="#test-automation"><span>Test Automation</span></a></h3><p>测试自动化，使用工具和脚本自动执行测试用例的过程。</p><h3 id="test-pyramid" tabindex="-1"><a class="header-anchor" href="#test-pyramid"><span>Test Pyramid</span></a></h3><p>测试金字塔，一种测试策略模型，强调不同层次测试的合理比例。</p><h3 id="trunk-based-development" tabindex="-1"><a class="header-anchor" href="#trunk-based-development"><span>Trunk-Based Development</span></a></h3><p>主干开发，一种版本控制策略，开发人员直接在主分支上进行开发。</p><h2 id="u" tabindex="-1"><a class="header-anchor" href="#u"><span>U</span></a></h2><h3 id="unit-test" tabindex="-1"><a class="header-anchor" href="#unit-test"><span>Unit Test</span></a></h3><p>单元测试，针对软件中最小可测试单元的测试。</p><h3 id="user-story" tabindex="-1"><a class="header-anchor" href="#user-story"><span>User Story</span></a></h3><p>用户故事，敏捷开发中描述功能需求的简短描述，从用户角度编写。</p><h2 id="v" tabindex="-1"><a class="header-anchor" href="#v"><span>V</span></a></h2><h3 id="version-control" tabindex="-1"><a class="header-anchor" href="#version-control"><span>Version Control</span></a></h3><p>版本控制，管理和跟踪文件和代码变更的系统。</p><h2 id="w" tabindex="-1"><a class="header-anchor" href="#w"><span>W</span></a></h2><h3 id="webhook" tabindex="-1"><a class="header-anchor" href="#webhook"><span>Webhook</span></a></h3><p>Web钩子，一种机制，当特定事件发生时，系统会向预定义的URL发送HTTP请求。</p><h2 id="y" tabindex="-1"><a class="header-anchor" href="#y"><span>Y</span></a></h2><h3 id="yaml-yaml-ain-t-markup-language" tabindex="-1"><a class="header-anchor" href="#yaml-yaml-ain-t-markup-language"><span>YAML (YAML Ain&#39;t Markup Language)</span></a></h3><p>YAML，一种人类可读的数据序列化标准，常用于配置文件。</p><h2 id="技术缩写词" tabindex="-1"><a class="header-anchor" href="#技术缩写词"><span>技术缩写词</span></a></h2><h3 id="ci-cd" tabindex="-1"><a class="header-anchor" href="#ci-cd"><span>CI/CD</span></a></h3><p>持续集成/持续交付（Continuous Integration/Continuous Delivery）</p><h3 id="dast-dynamic-application-security-testing" tabindex="-1"><a class="header-anchor" href="#dast-dynamic-application-security-testing"><span>DAST (Dynamic Application Security Testing)</span></a></h3><p>动态应用安全测试</p><h3 id="dora-devops-research-and-assessment" tabindex="-1"><a class="header-anchor" href="#dora-devops-research-and-assessment"><span>DORA (DevOps Research and Assessment)</span></a></h3><p>DevOps研究与评估</p><h3 id="dsl-domain-specific-language" tabindex="-1"><a class="header-anchor" href="#dsl-domain-specific-language"><span>DSL (Domain Specific Language)</span></a></h3><p>领域特定语言</p><h3 id="faas-function-as-a-service" tabindex="-1"><a class="header-anchor" href="#faas-function-as-a-service"><span>FaaS (Function as a Service)</span></a></h3><p>函数即服务</p><h3 id="iac-infrastructure-as-code-1" tabindex="-1"><a class="header-anchor" href="#iac-infrastructure-as-code-1"><span>IaC (Infrastructure as Code)</span></a></h3><p>基础设施即代码</p><h3 id="idp-internal-developer-platform" tabindex="-1"><a class="header-anchor" href="#idp-internal-developer-platform"><span>IDP (Internal Developer Platform)</span></a></h3><p>内部开发者平台</p><h3 id="k8s" tabindex="-1"><a class="header-anchor" href="#k8s"><span>K8s</span></a></h3><p>Kubernetes的缩写</p><h3 id="mttr-mean-time-to-recovery" tabindex="-1"><a class="header-anchor" href="#mttr-mean-time-to-recovery"><span>MTTR (Mean Time To Recovery)</span></a></h3><p>平均恢复时间</p><h3 id="npm-node-package-manager" tabindex="-1"><a class="header-anchor" href="#npm-node-package-manager"><span>NPM (Node Package Manager)</span></a></h3><p>Node包管理器</p><h3 id="opa-open-policy-agent" tabindex="-1"><a class="header-anchor" href="#opa-open-policy-agent"><span>OPA (Open Policy Agent)</span></a></h3><p>开放策略代理</p><h3 id="rbac-role-based-access-control" tabindex="-1"><a class="header-anchor" href="#rbac-role-based-access-control"><span>RBAC (Role-Based Access Control)</span></a></h3><p>基于角色的访问控制</p><h3 id="scm-source-control-management-1" tabindex="-1"><a class="header-anchor" href="#scm-source-control-management-1"><span>SCM (Source Control Management)</span></a></h3><p>源码管理</p><h3 id="sre-site-reliability-engineering" tabindex="-1"><a class="header-anchor" href="#sre-site-reliability-engineering"><span>SRE (Site Reliability Engineering)</span></a></h3><p>站点可靠性工程</p><h3 id="scm-software-configuration-management" tabindex="-1"><a class="header-anchor" href="#scm-software-configuration-management"><span>SCM (Software Configuration Management)</span></a></h3><p>软件配置管理</p><h3 id="sli-service-level-indicator-1" tabindex="-1"><a class="header-anchor" href="#sli-service-level-indicator-1"><span>SLI (Service Level Indicator)</span></a></h3><p>服务水平指标</p><h3 id="slo-service-level-objective-1" tabindex="-1"><a class="header-anchor" href="#slo-service-level-objective-1"><span>SLO (Service Level Objective)</span></a></h3><p>服务水平目标</p><h3 id="sla-service-level-agreement-1" tabindex="-1"><a class="header-anchor" href="#sla-service-level-agreement-1"><span>SLA (Service Level Agreement)</span></a></h3><p>服务水平协议</p><h3 id="ssh-secure-shell-1" tabindex="-1"><a class="header-anchor" href="#ssh-secure-shell-1"><span>SSH (Secure Shell)</span></a></h3><p>安全外壳协议</p><h3 id="tls-transport-layer-security" tabindex="-1"><a class="header-anchor" href="#tls-transport-layer-security"><span>TLS (Transport Layer Security)</span></a></h3><p>传输层安全</p><h3 id="ui-user-interface" tabindex="-1"><a class="header-anchor" href="#ui-user-interface"><span>UI (User Interface)</span></a></h3><p>用户界面</p><h3 id="ux-user-experience" tabindex="-1"><a class="header-anchor" href="#ux-user-experience"><span>UX (User Experience)</span></a></h3><p>用户体验</p><h2 id="dora指标" tabindex="-1"><a class="header-anchor" href="#dora指标"><span>DORA指标</span></a></h2><h3 id="deployment-frequency" tabindex="-1"><a class="header-anchor" href="#deployment-frequency"><span>Deployment Frequency</span></a></h3><p>部署频率，衡量团队在一定时间内成功部署到生产的次数。</p><h3 id="lead-time-for-changes" tabindex="-1"><a class="header-anchor" href="#lead-time-for-changes"><span>Lead Time for Changes</span></a></h3><p>变更前置时间，衡量从代码提交到成功运行在生产环境的平均时间。</p><h3 id="change-failure-rate" tabindex="-1"><a class="header-anchor" href="#change-failure-rate"><span>Change Failure Rate</span></a></h3><p>变更失败率，衡量部署到生产环境的变更中导致失败的比例。</p><h3 id="time-to-restore-service" tabindex="-1"><a class="header-anchor" href="#time-to-restore-service"><span>Time to Restore Service</span></a></h3><p>服务恢复时间，衡量从服务中断到恢复正常运行的平均时间。</p><p>通过理解这些术语，读者可以更好地掌握CI/CD平台建设的相关概念和实践方法。</p>',230)])])}const d=e(i,[["render",h]]),o=JSON.parse('{"path":"/posts/ci-cd/089-appendix-d-glossary.html","title":"附录D: 术语表","lang":"zh-CN","frontmatter":{"title":"附录D: 术语表","date":"2025-09-07T00:00:00.000Z","categories":["CICD"],"tags":["CICD"],"published":true,"description":"本文档提供了CI/CD及相关领域中常用术语的定义和解释，帮助读者更好地理解本书内容。 A API (Application Programming Interface) 应用程序编程接口，定义了软件组件之间交互的规范和协议。 API-First Design API优先设计，指在开发过程中首先设计和定义API接口，然后基于API进行开发的方法。 App...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"附录D: 术语表\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-09-07T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-07T09:02:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://houbb.github.io/blog-plateform-design/posts/ci-cd/089-appendix-d-glossary.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"附录D: 术语表"}],["meta",{"property":"og:description","content":"本文档提供了CI/CD及相关领域中常用术语的定义和解释，帮助读者更好地理解本书内容。 A API (Application Programming Interface) 应用程序编程接口，定义了软件组件之间交互的规范和协议。 API-First Design API优先设计，指在开发过程中首先设计和定义API接口，然后基于API进行开发的方法。 App..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-07T09:02:25.000Z"}],["meta",{"property":"article:tag","content":"CICD"}],["meta",{"property":"article:published_time","content":"2025-09-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-07T09:02:25.000Z"}]]},"git":{"createdTime":1757182343000,"updatedTime":1757235745000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":5,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":8.71,"words":2614},"filePathRelative":"posts/ci-cd/089-appendix-d-glossary.md","excerpt":"<p>本文档提供了CI/CD及相关领域中常用术语的定义和解释，帮助读者更好地理解本书内容。</p>\\n<h2>A</h2>\\n<h3>API (Application Programming Interface)</h3>\\n<p>应用程序编程接口，定义了软件组件之间交互的规范和协议。</p>\\n<h3>API-First Design</h3>\\n<p>API优先设计，指在开发过程中首先设计和定义API接口，然后基于API进行开发的方法。</p>\\n<h3>Approval Gate</h3>\\n<p>审批门禁，在流水线中设置的人工或自动审批节点，确保变更在部署前得到适当审查。</p>\\n<h3>Artifact</h3>","autoDesc":true}');export{d as comp,o as data};
