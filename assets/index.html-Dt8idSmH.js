import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as e,o as r}from"./app-C6R4DgQJ.js";const n={};function s(o,i){return r(),t("div",null,[...i[0]||(i[0]=[e('<p>CI/CD是现代软件工程的支柱，是DevOps文化的技术体现。</p><p>本书的目录将围绕如何构建一个<strong>高效、可靠、安全、可观测</strong>的企业级CI/CD平台，并真正融入研发全生命周期。</p><p>本书定位为帮助<strong>研发效能工程师、平台架构师、SRE、技术负责人</strong>系统地设计、实施和运营一个能提升交付速度与质量的一体化交付平台。</p><hr><h3 id="书名-企业级ci-cd平台建设-从代码提交到无缝交付的全生命周期实践" tabindex="-1"><a class="header-anchor" href="#书名-企业级ci-cd平台建设-从代码提交到无缝交付的全生命周期实践"><span><strong>书名：企业级CI/CD平台建设：从代码提交到无缝交付的全生命周期实践</strong></span></a></h3><hr><h3 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span><strong>目录</strong></span></a></h3><h4 id="第一部分-理念与规划篇——ci-cd的战略价值" tabindex="-1"><a class="header-anchor" href="#第一部分-理念与规划篇——ci-cd的战略价值"><span><strong>第一部分：理念与规划篇——CI/CD的战略价值</strong></span></a></h4><p><strong>第1章：数字化转型的引擎：CI/CD的核心价值</strong></p><ul><li>1.1 从手工部署到持续交付：软件交付的演进史</li><li>1.2 CI、CD、CD：厘清持续集成、持续交付与持续部署</li><li>1.3 DevOps文化与CI/CD：相辅相成的双翼</li><li>1.4 “全生命周期”与“可落地”：涵盖开发、测试、部署、运维的端到端流水线</li></ul><p><strong>第2章：核心概念与原则</strong></p><ul><li>2.1 基础组件：版本控制、流水线、构建工具、制品仓库、部署工具</li><li>2.2 关键原则：一切皆代码（Pipeline as Code, IaC）、自动化、快速反馈、持续改进</li><li>2.3 度量指标：部署频率、变更前置时间、变更失败率、平均恢复时间（MTTR）</li></ul><p><strong>第3章：平台建设前的战略规划</strong></p><ul><li>3.1 需求分析与现状评估：梳理技术栈、团队结构、现有流程痛点</li><li>3.2 技术选型决策：自研 vs 基于开源（Jenkins, GitLab CI, Drone, Argo CD）二次开发</li><li>3.3 设计原则：可扩展性、稳定性、安全性、用户体验</li><li>3.4 演进路线图：从标准化流水线到全自动化无人值守交付</li></ul><hr><h4 id="第二部分-平台架构与核心引擎篇" tabindex="-1"><a class="header-anchor" href="#第二部分-平台架构与核心引擎篇"><span><strong>第二部分：平台架构与核心引擎篇</strong></span></a></h4><p><strong>第4章：平台总体架构设计</strong></p><ul><li>4.1 分层架构：接入层、调度层、执行层、存储层、可视化层</li><li>4.2 核心服务设计：流水线服务、代码仓库服务、制品库服务、环境管理服务</li><li>4.3 高可用与弹性设计：Master/Worker架构、基于Kubernetes的动态弹性伸缩</li><li>4.4 API-first与插件化设计</li></ul><p><strong>第5章：流水线引擎设计与实现</strong></p><ul><li>5.1 流水线即代码（Pipeline as Code）：DSL vs YAML vs GUI</li><li>5.2 流水线核心模型：阶段（Stage）、任务（Job）、步骤（Step）</li><li>5.3 执行环境隔离：容器化（Docker/Kubernetes Pod）作为标准执行单元</li><li>5.4 流水线控制流：并行、串行、手动审批、重试、超时控制</li></ul><p><strong>第6章：代码管理与集成</strong></p><ul><li>6.1 与Git的深度集成：Webhook、Checkout策略、多仓库管理</li><li>6.2 分支策略与流水线触发：Git Flow, GitHub Flow, Trunk-Based Development</li><li>6.3 代码扫描与质量门禁：SonarQube集成、代码规范检查</li><li>6.4 变更关联：将提交、流水线、构建、部署与需求/缺陷关联</li></ul><p><strong>第7章：构建与制品管理</strong></p><ul><li>7.1 多语言构建支持：Java, Go, Python, Node.js, .NET的标准化构建环境</li><li>7.2 构建加速策略：缓存优化（依赖缓存、增量构建）、分布式构建</li><li>7.3 制品仓库管理：管理Jar, Docker Image, Npm等制品，生命周期管理</li><li>7.4 不可变制品与晋升流程：构建一次，多处部署</li></ul><hr><h4 id="第三部分-功能与交付篇" tabindex="-1"><a class="header-anchor" href="#第三部分-功能与交付篇"><span><strong>第三部分：功能与交付篇</strong></span></a></h4><p><strong>第8章：自动化测试集成</strong></p><ul><li>8.1 测试金字塔在流水线中的落地：单元测试、集成测试、端到端测试</li><li>8.2 自动化测试管理与执行：测试环境准备、测试用例筛选、测试报告分析</li><li>8.3 质量门禁：测试覆盖率、通过率作为流水线推进的硬性条件</li></ul><p><strong>第9章：部署与发布策略</strong></p><ul><li>9.1 环境管理：开发、测试、预发、生产环境的自动化管理与隔离</li><li>9.2 部署策略详解：蓝绿部署、金丝雀发布、滚动发布、功能开关</li><li>9.3 与Kubernetes的深度集成：Helm/Manifest的自动化部署</li><li>9.4 审批与安全管控：人工卡点、安全扫描、合规检查</li></ul><p><strong>第10章：安全与合规（DevSecOps）</strong></p><ul><li>10.1 左移的安全实践：SAST/DAST/SCA工具在流水线中的集成</li><li>10.2 密钥与凭据管理：与Vault等 secrets manager 集成</li><li>10.3 合规性即代码：自动化审计与合规检查</li><li>10.4 镜像安全扫描：CVE漏洞扫描与阻断</li></ul><hr><h4 id="第四部分-运维、观测与落地篇" tabindex="-1"><a class="header-anchor" href="#第四部分-运维、观测与落地篇"><span><strong>第四部分：运维、观测与落地篇</strong></span></a></h4><p><strong>第11章：可观测性与效能度量</strong></p><ul><li>11.1 流水线可视化：全局视图、实时日志、执行历史</li><li>11.2 平台自身监控：健康度、性能、队列状态</li><li>11.3 研发效能度量：DORA指标看板、瓶颈分析、驱动改进</li></ul><p><strong>第12章：平台运营与最佳实践</strong></p><ul><li>12.1 流水线模板库与共享库：促进最佳实践复用，降低使用门槛</li><li>12.2 多租户与权限管理（RBAC）：项目隔离、资源配额</li><li>12.3 推广与赋能：文档、培训、支持，培育内部专家</li><li>12.4 常见问题与避坑指南：依赖问题、环境问题、网络问题</li></ul><p><strong>第13章：与生态系统的集成</strong></p><ul><li>13.1 与项目管理工具（Jira）集成：需求驱动部署</li><li>13.2 与监控系统（Prometheus）集成：部署后自动验证</li><li>13.3 与沟通工具（钉钉/企微）集成：构建结果通知</li><li>13.4 与Serverless/FaaS平台集成</li></ul><hr><h4 id="第五部分-进阶与未来篇" tabindex="-1"><a class="header-anchor" href="#第五部分-进阶与未来篇"><span><strong>第五部分：进阶与未来篇</strong></span></a></h4><p><strong>第14章：GitOps模式实践</strong></p><ul><li>14.1 GitOps核心思想：声明式、版本控制、自动同步</li><li>14.2 使用Argo CD/FluxCD实现GitOps部署模式</li><li>14.3 应用与基础设施的统一交付</li></ul><p><strong>第15章：AIOOps在CI/CD中的探索</strong></p><ul><li>15.1 智能测试优化：预测性测试选择、故障测试用例识别</li><li>15.2 智能资源调度与成本优化</li><li>15.3 异常构建的智能根因分析</li></ul><p><strong>第16章：未来演进趋势</strong></p><ul><li>16.1 内部开发者平台（IDP）与CI/CD</li><li>16.2 安全与合规的进一步自动化</li><li>16.3 云原生环境下的CI/CD新范式</li></ul><p><strong>附录</strong></p><ul><li>A. 主流CI/CD工具对比</li><li>B. Jenkinsfile/GitLab CI YAML 编写指南</li><li>C. Dockerfile 最佳实践</li><li>D. 术语表 (CI, CD, DevOps, SRE, DORA, etc.)</li></ul><hr><h3 id="本书特色建议" tabindex="-1"><a class="header-anchor" href="#本书特色建议"><span><strong>本书特色建议：</strong></span></a></h3><ol><li><strong>极强的实战性：</strong> 不仅讲概念，更要给出具体配置示例、代码片段（Jenkinsfile/.gitlab-ci.yml）、架构图，解决实践中遇到的真实问题（如依赖缓存、环境隔离）。</li><li><strong>文化与流程并重：</strong> 强调CI/CD的成功不仅是工具落地，更是研发流程改进和文化变革。包含如何推动团队采纳新流程的 advice。</li><li><strong>案例驱动：</strong> 包含不同技术栈（微服务、单体、前端）、不同场景（移动端发布、数据库变更）的完整流水线案例。</li><li><strong>突出“平台化”思维：</strong> 强调如何将CI/CD能力产品化，为内部开发者提供简单、统一、可靠的体验，而不仅仅是维护一套工具。</li><li><strong>安全至上：</strong> 将DevSecOps理念贯穿始终，在每个环节都考虑安全因素。</li></ol>',53)])])}const g=l(n,[["render",s]]),c=JSON.parse('{"path":"/posts/ci-cd/","title":"","lang":"zh-CN","frontmatter":{"description":"CI/CD是现代软件工程的支柱，是DevOps文化的技术体现。 本书的目录将围绕如何构建一个高效、可靠、安全、可观测的企业级CI/CD平台，并真正融入研发全生命周期。 本书定位为帮助研发效能工程师、平台架构师、SRE、技术负责人系统地设计、实施和运营一个能提升交付速度与质量的一体化交付平台。 书名：企业级CI/CD平台建设：从代码提交到无缝交付的全生命...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-06T12:33:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://houbb.github.io/blog-middleware/posts/ci-cd/"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:description","content":"CI/CD是现代软件工程的支柱，是DevOps文化的技术体现。 本书的目录将围绕如何构建一个高效、可靠、安全、可观测的企业级CI/CD平台，并真正融入研发全生命周期。 本书定位为帮助研发效能工程师、平台架构师、SRE、技术负责人系统地设计、实施和运营一个能提升交付速度与质量的一体化交付平台。 书名：企业级CI/CD平台建设：从代码提交到无缝交付的全生命..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-06T12:33:33.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-06T12:33:33.000Z"}]]},"git":{"createdTime":1757162013000,"updatedTime":1757162013000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":5.84,"words":1752},"filePathRelative":"posts/ci-cd/index.md","excerpt":"<p>CI/CD是现代软件工程的支柱，是DevOps文化的技术体现。</p>\\n<p>本书的目录将围绕如何构建一个<strong>高效、可靠、安全、可观测</strong>的企业级CI/CD平台，并真正融入研发全生命周期。</p>\\n<p>本书定位为帮助<strong>研发效能工程师、平台架构师、SRE、技术负责人</strong>系统地设计、实施和运营一个能提升交付速度与质量的一体化交付平台。</p>\\n<hr>\\n<h3><strong>书名：企业级CI/CD平台建设：从代码提交到无缝交付的全生命周期实践</strong></h3>\\n<hr>\\n<h3><strong>目录</strong></h3>","autoDesc":true}');export{g as comp,c as data};
